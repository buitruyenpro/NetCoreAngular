lệnh tạo dự án mới API: 
dotnet new sln
dotnet new webapi-o API
dotnet sln -h
dotnet sln add API
============================================================================================================================= 
Chạy ứng dụng:
dotnet run 
dotnet watch run
============================================================================== ===============================================
kiểm tra chứngw chỉ:
dotnet dev-certs https
dotnet dev-certs https -t
================================================================================
Kiểm tra thông tin: dotnet --info
Microsoft.EntityFrameworkCore -> Microsoft.EntityFrameworkCore -> 3.1.1
Microsoft.EntityFrameworkCore -> Microsoft.EntityFrameworkCore.Sqlite -> 3.1.1 ->restore ->dotnet restore

Microsoft.EntityFrameworkCore.Design ->3.1.1

Automapper.Extensions.Microsoft->Automapper.Extensions.Microsoft.Denpencyinjection->7.0.0

=========================================================================================================
Cấu hình dữ liệu
dotnet tool install --global dotnet-ef --version 3.1.1
dotnet ef -h
dotnet ef migrations add InitialCreate -o Data/Migrations
=========================================================================================================
Tạo dữ liệu
dotnet ef database update
========================================================================================================
Vào thư mục chính
dotnet new classlib -o Core
dotnet new classlib -o Infrastructure
dotnet sln add Core
dotnet sln add Infrastructure
Vào Core tham chiếu
dotnet add reference ../Infrastructure/
Vào Infrastructure tham chiếu
dotnet add reference ../Core/
Xong đó
dotnet restore
Xóa tham chiếu
dotnet remove Core/Core.csproj reference Infrastructure/Infrastructure.csproj
dotnet remove reference ..\ReferenceCheckLibrary\ReferenceCheckLibrary.csproj
=========================================================================================================
xóa bảng csdl
dotnet ef database drop -p Infrastructure -s API
xóa migrations
dotnet ef migrations remove -p Infrastructure -s API
thêm migrations
- p là thư mục mình chọn, -s là bỏ qua thư mục API, -o đầu ra thư mục dữ liệu
dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations

=========================================================================================================
 Swashbuckle.AspNetCore.SwaggerGen
 Swashbuckle.AspNetCore.SwaggerUI
 ============================================================================================================================= 
npm install -g @angular/cli
ng new my-dream-app ->sau đó chọn scss
cd my-dream-app
ng serve
cấu hình chứng chỉ:
Double click on the certificate (server.crt)
Click on the button “Install Certificate …”
Select whether you want to store it on user level or on machine level
Click “Next”
Select “Place all certificates in the following store”
Click “Browse”
Select “Trusted Root Certification Authorities”
Click “Ok”
Click “Next”
Click “Finish”
If you get a prompt, click “Yes”
==========================================================================================================
https://valor-software.com/ngx-bootstrap/#/documentation
npm install ngx-bootstrap --save
npm install font-awesome
========================================================================================================== =================== 
Tạo thành phần trong angular:
ng g c nav-bar --skip-tests
đi vào thư mục app gõ:
ng g m core
tương tự cho shop, shared

đi vào thư mục shop:
ng g c shop --flat  --skip-tests
Tạo dịch vụ
ng g s shop  --skip-tests --flat
tạo routing:
ng g m shop-routing --flat
tạo thành phần con: 
ng g c nav-bar --skip-tests
===================================================================================================
npm install ngx-toastr --save
npm install --save xng-breadcrumb
> npm install bootswatch
npm install ngx-spinner
chú ý thêm thư viện này vào: import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
============================================================================================================================= 
StackExchange.Redis
https://chocolatey.org/packages/redis-64/
choco install redis-64 --version 3.0.503
run: redis-server
off: redis-cli ->shutdown
===============================================================================================
Microsoft.AspNetCore.Identity ->2.2.0 cái này trong Infras
Microsoft.AspNetCore.Identity.EntityFrameworkCore ->3.1.1 cái này trong Infras
Microsoft.IdentityModel.Tokens ->5.6.0 cái này trong Infras
System.IdentityModel.Tokens.Jwt ->5.6.0 cái này trong Infras
Microsoft.AspNetCore.Authentication.JwtBearer->3.1.1 cái này trong API
Microsoft.Extensions.Identity.Stores ->3.1.1 cái này trong Core
===============================================================================================
đổi netstandard2.0 -> netstandard2.1 trong Core
đổi netstandard2.0 -> netstandard2.1 trong fras
============================================================================================================================= 
dotnet ef migrations add IdentityInitial -p Infrastructure -s API -o Identity/Migrations -c AppIdentityDbContext
làm sạch dự án: dotnet clean
============================================================================================================================= 
http://www.jsontots.com/
https://github.com/trycatchlearn/skinet
https://localhost:5001/swagger/index.html
============================================================================================================================= 
Cái này dành cho Angular
https://material.angular.io/cdk/stepper/overview 
ng add @angular/cdk
// Chỉ cần tên phương thức giống nhau là nó tự động gọi đến, tách ra thành các thành phần gọi chức năng, tóm
lại ba thành phân tên phải giống nhau
============================================================================================================================= 
Đưa checkoutForm để lấy giá trị thôi, với checkoutForm để nó thực hiện form, để nó liên kết
kiểm tra tính hợp lệ trong trường
Dầu tiên: tạo mô đun ng g m orders
Sau đó cd vào folder orders tạo: ng g m orders-routing --flat
Sau đó tạo component: ng g c orders --flat --skip-tests
Sau đó tạo service : ng g s orders --flat --skip-tests
=======================================================================================================
Stripe.net
dotnet restore
Chú ý không thể cập nhật giá trong basket chỉ cập nhật số lượng thôi
=======================================================================================================
Đầu tiên mình tạo một đơn đặt hàng online có giá trị tiền là báo nhiêu
Sau đó mình sẽ thanh toán: nếu thành toán hợp lệ thì trạng thái nó sẽ là success
Một điều cần nghi nhớ là: khi người dùng thanh toán quá nhiều lần thì mình tìm
kiếm các đặt hàng giá trị giao dịch và xóa nó đi, sau đó mình tạo một đặt hàng online mới
sau đó mình tạo một đơn đặt hàng mới
Nên nhớ khi chưa thanh toán thành công thì basket bên client chưa xóa nên giỏ hàng vẫn tồn tại
=======================================================================================================
mysql -u root -p
CREATE USER 'appuser'@'localhost' IDENTIFIED BY 'truyen95@';
GRANT ALL PRIVILEGES ON *.* TO 'appuserskinet'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
Pomelo.EntityFrameworkCore.Mysql ->Infrastructure
=======================================================================================================
$Env:ASPNETCORE_ENVIRONMENT = "Production"
dotnet ef migrations add "MySQL Initial" -p Infrastructure -s API -c StoreContext -o Data/Migrations
dotnet ef migrations add "MySQL Indentity Initial" -p Infrastructure -s API -c AppIdentityDbContext -o Identity/Migrations
=======================================================================================================
dotnet publish -c Release -o publish skinet.sln